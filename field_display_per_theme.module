<?php

/**
 * Module file for Field display per theme module.
 *
 * @TODO
 *   1. Fix javascript so formatter changes work
 *   2. Status messages at the top of each view mode screen?
 *   3. Database table, or similar, for storage
 *   4. Features integration
 *   5. Export-to-a-theme functionality
 *   6. field_group integration
 *   7. Delete our variable(s) in hook_uninstall().
 */

/**
 * Implements hook_menu().
 */
function field_display_per_theme_menu() {
  $items = array();

  // Ensure the following is not executed until field_bundles is working and
  // tables are updated. Needed to avoid errors on initial installation.
  if (defined('MAINTENANCE_MODE')) {
    return $items;
  }

  // Override field display tab for each theme.
  foreach (list_themes() as $theme) {
    $items['admin/appearance/settings/' . $theme->name . '/field-display'] = array(
      'title' => 'Override field display',
      'page callback' => 'system_admin_menu_block_page',
      'type' => MENU_NORMAL_ITEM,
      'access callback' => 'field_display_per_theme_access',
      'access arguments' => array($theme),
      'file path' => drupal_get_path('module', 'system'),
      'file' => 'system.admin.inc',
    );

    // The following is based on field_ui_menu().

    // Create tabs for all possible bundles.
    foreach (entity_get_info() as $entity_type => $entity_info) {
      if ($entity_info['fieldable']) {

        $items['admin/appearance/settings/' . $theme->name . '/field-display/' . $entity_type] = array(
          'title' => 'Override field display',
          'title callback' => 'field_display_per_theme_title_callback',
          'title arguments' => array($theme->name, $entity_info['label'], $theme->info['name']),
          'type' => MENU_NORMAL_ITEM,
          'access callback' => 'field_display_per_theme_access',
          'access arguments' => array($theme),
        );

        // I can't seem to get the menu system to work with the above as a
        // default local task, so we make it a redirect to the first-selected
        // bundle tab.
        if (!empty($entity_info['bundles'])) {
          $bundle_names = array_keys($entity_info['bundles']);
          $first_bundle = reset($bundle_names);
          $items['admin/appearance/settings/' . $theme->name . '/field-display/' . $entity_type] += array(
            'page callback' => 'drupal_goto',
            'page arguments' => array('admin/appearance/settings/' . $theme->name . '/field-display/' . $entity_type . '/' . $first_bundle),
          );
        }

        $weight = 0;
        foreach ($entity_info['bundles'] as $bundle_name => $bundle_info) {
          if (isset($bundle_info['admin'])) {

            $bundle_arg = 6;
            $access = array_intersect_key($bundle_info['admin'], drupal_map_assoc(array('access callback', 'access arguments')));
            $access += array(
              'access callback' => 'user_access',
              'access arguments' => array('administer site configuration'),
            );

            $items['admin/appearance/settings/' . $theme->name . '/field-display/' . $entity_type . '/' . $bundle_name] = array(
              'title' => $bundle_info['label'],
              'page callback' => 'drupal_get_form',
              'page arguments' => array('field_display_per_theme_display_overview_list_form', $theme->name, $entity_type, $bundle_arg),
              'type' => MENU_LOCAL_TASK,
              'file' => 'field_display_per_theme.admin.inc',
              'weight' => $weight++,
            ) + $access;

            $items['admin/appearance/settings/' . $theme->name . '/field-display/' . $entity_type . '/' . $bundle_name . '/default'] = array(
              'title' => 'Status',
              'access callback' => '_field_ui_view_mode_menu_access',
              'access arguments' => array_merge(array($entity_type, $bundle_arg, 'default', $access['access callback']), $access['access arguments']),
              'type' => MENU_DEFAULT_LOCAL_TASK,
              'weight' => -10,
              'file' => 'field_display_per_theme.admin.inc',
            );

            $view_mode_weight = 0;
            foreach ($entity_info['view modes'] as $view_mode => $view_mode_info) {

              $items['admin/appearance/settings/' . $theme->name . '/field-display/' . $entity_type . '/' . $bundle_name . '/' . $view_mode] = array(
                'title' => $view_mode_info['label'],
                'page callback' => 'field_display_per_theme_display_overview_page',
                'page arguments' => array($theme->name, $entity_type, $bundle_arg, $view_mode),
                'access callback' => '_field_display_per_theme_field_ui_view_mode_menu_access',
                'access arguments' => array_merge(array($entity_type, $bundle_arg, $view_mode, $access['access callback']), $access['access arguments']),
                'type' => MENU_LOCAL_TASK,
                'weight' => $view_mode_weight++,
                'file' => 'field_display_per_theme.admin.inc',
              );
            }
          }
        }
      }
    }
  }

  return $items;
}

/**
 * Menu title callback.
 *
 * @param $theme_key
 * @param $entity_type_label
 * @param $theme_label
 *
 * @return null|string
 */
function field_display_per_theme_title_callback($theme_key, $entity_type_label, $theme_label) {
  // Keep it simple on the listing page.
  if (current_path() === 'admin/appearance/settings/' . $theme_key . '/field-display') {
    return check_plain($entity_type_label);
  }
  else {
    return t('Override @entity_type_label field display in @theme_name', array('@entity_type_label' => $entity_type_label, '@theme_name' => $theme_label));
  }
}

/**
 * Determine if the current user has access to the field display overrides
 * page on a certain theme.
 *
 * @param $theme
 * @return bool
 */
function field_display_per_theme_access($theme) {
  return _system_themes_access($theme) && user_access('administer site configuration');
}

/**
 * Menu access callback for the 'view mode display settings' pages.
 *
 * @param $entity_type
 * @param $bundle
 * @param $view_mode
 * @param $access_callback
 */
function _field_display_per_theme_field_ui_view_mode_menu_access($entity_type, $bundle, $view_mode, $access_callback) {
  // First, determine visibility according to the 'use custom display'
  // setting for the view mode.
  $bundle = field_extract_bundle($entity_type, $bundle);
  $view_mode_settings = field_view_mode_settings($entity_type, $bundle);
  $visibility = ($view_mode == 'default') || !empty($view_mode_settings[$view_mode]['custom_settings']);

  // Our own force variable may work here.
  if (!$visibility) {
    $forced_overrides = variable_get('field_display_per_theme_force_overrides', array());
    if (!empty($forced_overrides[$entity_type][$bundle][$view_mode])) {
      $visibility = TRUE;
    }
  }

  // Then, determine access according to the $access parameter. This duplicates
  // part of _menu_check_access().
  if ($visibility) {
    // Grab the variable 'access arguments' part.
    $all_args = func_get_args();
    $args = array_slice($all_args, 4);
    $callback = empty($access_callback) ? 0 : trim($access_callback);
    if (is_numeric($callback)) {
      return (bool) $callback;
    }
    else {
      // As call_user_func_array() is quite slow and user_access is a very
      // common callback, it is worth making a special case for it.
      if ($access_callback == 'user_access') {
        return (count($args) == 1) ? user_access($args[0]) : user_access($args[0], $args[1]);
      }
      elseif (function_exists($access_callback)) {
        return call_user_func_array($access_callback, $args);
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Detects our special version of the Manage Display form and alters it.
 */
function field_display_per_theme_form_field_display_per_theme_display_overview_form_alter(&$form, &$form_state) {
  _field_display_per_theme_display_overview_form_alter($form, $form_state);
}

/**
 * Implements hook_theme().
 */
function field_display_per_theme_theme() {
  $items = array();

  $items['field_display_per_theme_overview_list'] = array(
    'render element' => 'element',
    'file' => 'field_display_per_theme.admin.inc',
  );

  return $items;
}

/**
 * Loads our override field display config.
 *
 * The parameters may be used to drill-down into the data.
 *
 * @param null $theme
 * @param null $entity_type
 * @param null $bundle
 * @param null $view_mode
 * @param null $field_name
 *
 * @return array.
 */
function field_display_per_theme_config_load($theme = NULL, $entity_type = NULL, $bundle = NULL, $view_mode = NULL, $field_name = NULL) {

  $config = array();

  // @TODO: Actually load this from somewhere.
  $config['bartik']['node']['article']['teaser'] = array(
    'field_image' => array(
      'label' => 'above',
      'settings' => array(
        'image_style' => 'large',
        'image_link' => '',
      ),
    ),
  );

  // Return the required level of detail.
  $return = $config;
  foreach (array($theme, $entity_type, $bundle, $view_mode, $field_name) as $level) {
    if (!isset($level)) {
      break;
    }
    if (!isset($return[$level])) {
      $return = array();
      break;
    }
    $return = $return[$level];
  }

  return $return;
}

/**
 * Saves field display overrides.
 *
 * The parameters may be used to drill-down into the data.
 *
 * @param null $theme
 * @param null $entity_type
 * @param null $bundle
 * @param null $view_mode
 * @param null $config
 *
 * @return array.
 */
function field_display_per_theme_config_save($theme, $entity_type, $bundle, $view_mode, $config) {

}

/**
 * Delete field display overrides.
 *
 * @param null $theme
 * @param null $entity_type
 * @param null $bundle
 * @param null $view_mode
 *
 * @return array.
 */
function field_display_per_theme_config_delete($theme, $entity_type, $bundle, $view_mode) {

}